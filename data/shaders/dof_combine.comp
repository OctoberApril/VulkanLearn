#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#include "uniform_layout.sh"
#include "global_parameters.sh"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (set = 3, binding = 0) uniform sampler2D DOFPostfilterResult[3];
layout (set = 3, binding = 1) uniform sampler2D TemporalShadingResult[2];
layout (set = 3, binding = 2) uniform sampler2D TemporalCoCResult[2];
layout (set = 3, binding = 3, rgba32f) uniform image2D OutputImage[3];

void main() 
{
	ivec2 size = imageSize(OutputImage[frameIndex]);
	vec2 uv = vec2(gl_GlobalInvocationID.xy + 0.5f) / vec2(size);

	vec4 postfilteredCoC = texture(DOFPostfilterResult[frameIndex], uv).rgba;
	float temporalCoC = (texture(TemporalCoCResult[pingpongIndex], uv).r * 2.0f - 1.0f) * globalData.DOFSettings0.x;
	vec4 temporalShading = texture(TemporalShadingResult[pingpongIndex], uv);

	float farAlpha = smoothstep(globalData.gameWindowSize.z * 2.0f, globalData.gameWindowSize.z * 4.0f, temporalCoC);
	float nearAlpha = postfilteredCoC.a;

	// mix(mix(temporalShading, postfilteredCoC.rgb, farAlpha), postfilteredCoC.rgb, nearAlpha)
	vec3 color = mix(temporalShading.rgb, postfilteredCoC.rgb, farAlpha + nearAlpha - farAlpha * nearAlpha);

	imageStore(OutputImage[frameIndex],	
		ivec2(gl_GlobalInvocationID.xy), 
		vec4(color, 1.0f));
}