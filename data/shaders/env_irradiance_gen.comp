#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#include "uniform_layout.sh"
#include "global_parameters.sh"
#include "atmosphere/functions.sh"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (set = 3, binding = 0) uniform samplerCube envSkybox;
layout (set = 3, binding = 1, rgba32f) uniform image2DArray envIrradiance;

#include "uniform_layout.sh"
#include "global_parameters.sh"

const float sampleDelta = 0.2;

layout(push_constant) uniform PushConsts {
	layout (offset = 0) vec4 corners[4];
} pushConsts;

void main() 
{
	ivec2 offset = ivec2(pushConsts.corners[1].w, pushConsts.corners[2].w);
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy + offset);
	ivec3 size = imageSize(envIrradiance);
	vec2 uv = vec2(coord + 0.5f) / vec2(size.xy);

	uint planetChunkIndex = uint(pushConsts.corners[3].w);

	vec3 bottomLeft		= pushConsts.corners[0].xyz;
	vec3 bottomRight	= pushConsts.corners[1].xyz;
	vec3 topLeft		= pushConsts.corners[2].xyz;
	vec3 topRight		= pushConsts.corners[3].xyz;

	vec3 viewDir = normalize(mix(mix(topLeft, topRight, uv.x), mix(bottomLeft, bottomRight, uv.x), uv.y));

	vec3 N = viewDir;
	vec3 up = vec3(0.0, 1.0, 0.0);
	vec3 right = normalize(cross(up, N));
	up = cross(N, right);

	vec3 zAxis = normalize(viewDir);
	vec3 xAxis = normalize(cross(up, zAxis));
	vec3 yAxis = normalize(cross(zAxis, xAxis));
	mat3 tangentSpace = mat3(xAxis, yAxis, zAxis);

	float numSamples = 0;

	vec3 irradiance = vec3(0.0);
	for (float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta) {
		for (float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta) {
			vec3 sampleDir = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
			sampleDir = normalize(tangentSpace * sampleDir);
			irradiance += texture(envSkybox, sampleDir).rgb * cos(theta) * sin(theta);
			numSamples++;
		}
	}

	imageStore(envIrradiance,	
		ivec3(coord, pushConsts.corners[0].w),	// Hack: Put face id to the w component of the first corner
		vec4((irradiance / numSamples) * PI, 1.0));
}